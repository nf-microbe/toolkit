/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    withName: '.*' {
        ext.prefix = { prefix ->
            if (meta.chunk && meta.extension) { "${meta.id}_run${meta.run}_${meta.assembler}_${meta.extension}_${meta.chunk}" }
            else if (meta.chunk && meta.assembler) { "${meta.id}_run${meta.run}_${meta.assembler}_${meta.chunk}" }
            else if (meta.chunk) { "${meta.id}_run${meta.run}_${meta.chunk}" }
            else if (meta.extension) { "${meta.id}_run${meta.run}_${meta.assembler}_${meta.extension}" }
            else if (meta.assembler) { "${meta.id}_run${meta.run}_${meta.assembler}" }
            else if (meta.run) { "${meta.id}_run${meta.run}" }
            else if (meta.id) { "${meta.id}" }
            else null
        }
        // publishDir = [
        //     path: { "${params.outdir}" + "/" + task.process.replace(':', '/').toLowerCase() },
        //     mode: params.publish_dir_mode
        // ]
        storeDir = {
            if (meta.chunk && meta.extension) { "${params.outdir}" + "/" + task.process.replace(':', '/').toLowerCase() + "/${meta.id}_run${meta.run}_${meta.assembler}_${meta.extension}_${meta.chunk}" }
            else if (meta.chunk && meta.assembler) { "${params.outdir}" + "/" + task.process.replace(':', '/').toLowerCase() + "/${meta.id}_run${meta.run}_${meta.assembler}_${meta.chunk}" }
            else if (meta.chunk) { "${params.outdir}" + "/" + task.process.replace(':', '/').toLowerCase() + "/${meta.id}_run${meta.run}_${meta.chunk}" }
            else if (meta.extension) { "${params.outdir}" + "/" + task.process.replace(':', '/').toLowerCase() + "/${meta.id}_run${meta.run}_${meta.assembler}_${meta.extension}" }
            else if (meta.assembler) { "${params.outdir}" + "/" + task.process.replace(':', '/').toLowerCase() + "/${meta.id}_run${meta.run}_${meta.assembler}" }
            else if (meta.run) { "${params.outdir}" + "/" + task.process.replace(':', '/').toLowerCase() + "/${meta.id}_run${meta.run}" }
            else if (meta.id) { "${params.outdir}" + "/" + task.process.replace(':', '/').toLowerCase() + "/${meta.id}" }
            else { "${params.outdir}" + "/" + task.process.replace(':', '/').toLowerCase() }
        }
    }

    withName: SRA_SRATOOLS {
        ext.args = params.prefetch_args ? params.prefetch_args : ""
        ext.args2 = params.fasterq_dump_args ? params.fasterq_dump_args : ""
    }

    withName: FASTP {
        ext.args = params.fastp_args ? params.fastp_args : ""
    }

    withName: 'FASTQ_BOWTIE2_FASTQ:BOWTIE2_ALIGN' {
        ext.args = params.bowtie2_host_removal_args ? params.bowtie2_host_removal_args : ""
    }

    withName: 'FASTQ_VIROMEQC_TSV:VIROMEQC_VIROMEQC' {
        ext.args = params.viromeqc_args ? params.viromeqc_args : ""
    }

    withName: LOGAN_CONTIGAWSCLIMULTIPLIER {
        ext.args = [
            params.logan_contigs_min_abund ? "--abundance ${params.logan_contigs_min_abund}" : "",
            params.logan_contigs_multiplier ? "--multiplier" : "",
        ].join(' ').trim()
    }

    withName: LOGAN_UNITIGAWSCLIMULTIPLIER {
        ext.args = [
            params.logan_unitigs_min_abund ? "--abundance ${params.logan_unitigs_min_abund}" : "",
            params.logan_unitigs_multiplier ? "--multiplier" : "",
        ].join(' ').trim()
    }

    withName: ALLTHEBACTERIA_ARIA2SEQKITTRFINDER {
        resourceLimits = [
            cpus: 12,
            memory: '200.GB',
            time: '72.h'
        ]
        ext.args = params.download_aria2_args ? params.download_aria2_args : ""
        ext.args2 = params.download_seqkit_args ? params.download_seqkit_args : ""
        ext.args3 = params.download_trfinder_args ? params.download_trfinder_args : ""
    }

    withName: ENA_ARIA2SEQKITTRFINDER {
        ext.args = params.download_aria2_args ? params.download_aria2_args : ""
        ext.args2 = params.download_seqkit_args ? params.download_seqkit_args : ""
        ext.args3 = params.download_trfinder_args ? params.download_trfinder_args : ""
    }

    withName: ENA_ASPERACLISEQKITTRFINDER {
        ext.args = params.download_seqkit_args ? params.download_seqkit_args : ""
        ext.args2 = params.download_trfinder_args ? params.download_trfinder_args : ""
    }

    withName: 'MEGAHIT.*' {
        ext.args = params.megahit_args ? params.megahit_args : ""
    }

    withName: 'SPADES.*' {
        ext.args = params.spades_args ? params.spades_args : ""
    }

    withName: 'PLASS_PENGUIN.*' {
        ext.args = params.penguin_args ? params.penguin_args : ""
    }

    withName: 'FASTQFASTA_COBRA_FASTA:SEQKIT_SEQ_COBRA' {
        ext.args = "--min-len ${params.cobra_min_len}"
    }

    withName: 'FASTQFASTA_COBRA_FASTA:SEQKIT_FX2TAB_COBRA' {
        ext.args = "--header-line --name"
        ext.suffix = "txt"
    }

    withName: 'FASTQFASTA_COBRA_FASTA:COVERM_CONTIG_COBRA' {
        ext.args = params.cobra_coverm_args ? params.cobra_coverm_args : ""
    }

    withName: 'FASTQFASTA_COBRA_FASTA:COBRAMETA' {
        ext.args = params.cobra_args ? params.cobra_args : ""
    }

    withName: 'FASTQGFA_PHABLES_FASTA:PHABLES_RUN' {
        ext.args = params.phables_args ? params.phables_args : ""
    }

    withName: SEQKIT_SEQ {
        ext.args = "--min-len ${params.assembly_min_len}"
        ext.prefix = { prefix ->
            if (meta.chunk && meta.extension) { "${meta.id}_run${meta.run}_${meta.assembler}_${meta.extension}_${meta.chunk}.length_filtered" }
            else if (meta.chunk && meta.assembler) { "${meta.id}_run${meta.run}_${meta.assembler}_${meta.chunk}.length_filtered" }
            else if (meta.chunk) { "${meta.id}_run${meta.run}_${meta.chunk}.length_filtered" }
            else if (meta.extension) { "${meta.id}_run${meta.run}_${meta.assembler}_${meta.extension}.length_filtered" }
            else if (meta.assembler) { "${meta.id}_run${meta.run}_${meta.assembler}.length_filtered" }
            else if (meta.run) { "${meta.id}_run${meta.run}.length_filtered" }
            else if (meta.id) { "${meta.id}.length_filtered" }
            else null
        }
    }

    withName: SEQKIT_STATS {
        ext.args = "--all"
    }

    withName: SEQKIT_REPLACE{
        ext.args = {
            if (meta.chunk && meta.extension) { "-p ^ -r '${meta.id}_run${meta.run}_${meta.assembler}_${meta.extension}_${meta.chunk}'" }
            else if (meta.chunk && meta.assembler) { "-p ^ -r '${meta.id}_run${meta.run}_${meta.assembler}_${meta.chunk}'" }
            else if (meta.chunk) { "-p ^ -r '${meta.id}_run${meta.run}_${meta.chunk}'" }
            else if (meta.extension) { "-p ^ -r '${meta.id}_run${meta.run}_${meta.assembler}_${meta.extension}'" }
            else if (meta.assembler) { "-p ^ -r '${meta.id}_run${meta.run}_${meta.assembler}'" }
            else if (meta.run) { "-p ^ -r '${meta.id}_run${meta.run}'" }
            else if (meta.id) { "-p ^ -r '${meta.id}'" }
            else null
        }
    }

    withName: SEQKIT_SPLIT2 {
        ext.args = "--by-size ${params.assembly_split_size}"
    }

    withName: TRFINDER {
        ext.args = params.trfinder_args ? params.trfinder_args : ""
    }

    withName: 'FASTA_GENOMAD_FAATSV:GENOMAD_ENDTOEND' {
        ext.args = params.genomad_args ? params.genomad_args : ""
    }

    withName: PYRODIGALGV {
        ext.args = params.pyrodigalgv_args ? params.pyrodigalgv_args : ""
    }

    withName: CHECKV_DOWNLOADDATABASE {
        ext.prefix = "checkv_db"
    }

    withName: 'FASTA_CHECKV_TSV:CHECKV_ENDTOEND' {
        ext.args = params.checkv_args ? params.checkv_args : ""
    }

    withName: TANTAN {
        ext.args = params.tantan_args ? "${params.tantan_args}" : ""
    }

    withName: VTDB_COMPLETENESSFILTER {
        ext.args = [
            "--checkv_min_aai_completeness ${params.checkv_min_aai_completeness}",
            "--no_taxa_minimum_length ${params.no_taxa_virus_min_len}"
        ].join(' ').trim()
    }

    withName: TRTRIMMER {
        ext.args = params.trtrimmer_args ? params.trtrimmer_args : ""
    }

    withName: 'FASTA_SEQHASHER_FASTA:CSVTK_CONCAT' {
        ext.args = "--no-header-row -k"
    }

    withName: 'FASTA_SEQHASHER_FASTA:SEQHASHER_SEQHASHER' {
        ext.args = params.seqhasher_args ? params.seqhasher_args : ""
    }

    withName: 'FASTA_IPHOP_TSV:IPHOP_DOWNLOAD'{
        ext.args = params.iphop_db_version ? "-dbv ${params.iphop_db_version}" : ""
    }

    withName: 'FASTA_IPHOP_TSV:IPHOP_PREDICT' {
        ext.args = params.iphop_args ? params.iphop_args : ""
    }

    withName: BACPHLIP {
        ext.args = { meta.multi == true ? "--multi_fasta" : "" }
    }

    withName: SEQKIT_SEQ_PROVIRUS {
        ext.args = "--min-len ${params.provirus_min_len}"
        ext.prefix = { prefix ->
            if (meta.chunk && meta.extension) { "${meta.id}_run${meta.run}_${meta.assembler}_${meta.extension}_${meta.chunk}.provirus_filtered" }
            else if (meta.chunk && meta.assembler) { "${meta.id}_run${meta.run}_${meta.assembler}_${meta.chunk}.provirus_filtered" }
            else if (meta.chunk) { "${meta.id}_run${meta.run}_${meta.chunk}.provirus_filtered" }
            else if (meta.extension) { "${meta.id}_run${meta.run}_${meta.assembler}_${meta.extension}.provirus_filtered" }
            else if (meta.assembler) { "${meta.id}_run${meta.run}_${meta.assembler}.provirus_filtered" }
            else if (meta.run) { "${meta.id}_run${meta.run}.provirus_filtered" }
            else if (meta.id) { "${meta.id}.provirus_filtered" }
            else null
        }
    }

    withName: SEQKIT_CONCAT_PROVIRUS {
        ext.args = "--full"
    }

    withName: 'FASTA_VCLUST_FASTATSV_PROVIRUS:VCLUST_PREFILTER' {
        ext.args = params.provirus_derep_prefilt_args ? "${params.provirus_derep_prefilt_args}" : ""
    }

    withName: 'FASTA_VCLUST_FASTATSV_PROVIRUS:VCLUST_ALIGN' {
        ext.args = params.provirus_derep_align_args ? "${params.provirus_derep_align_args}" : ""
    }

    withName: 'FASTA_VCLUST_FASTATSV_PROVIRUS:VCLUST_CLUSTER' {
        ext.args = params.provirus_derep_cluster_args ? "${params.provirus_derep_cluster_args}" : ""
    }

    withName: 'FASTQFASTA_MVIRS_TSV:MVIRS_INDEX' {
        publishDir = { "${params.outdir}" + "/fastqfasta_mvirs_tsv/mvirs_index/" + "${meta.id}" }
    }

    withName: 'FASTQFASTA_MVIRS_TSV:MVIRS_OPRS' {
        ext.args = params.mvirs_args ? "${params.mvirs_args}" : ""
    }

    withName: 'FASTQFASTA_PROPHAGETRACER_TSV:SAMBAMBA_MARKDUP' {
        ext.prefix = { prefix ->
            if (meta.chunk && meta.extension) { "${meta.id}_run${meta.run}_${meta.assembler}_${meta.extension}_${meta.chunk}.markdup" }
            else if (meta.chunk && meta.assembler) { "${meta.id}_run${meta.run}_${meta.assembler}_${meta.chunk}.markdup" }
            else if (meta.chunk) { "${meta.id}_run${meta.run}_${meta.chunk}.markdup" }
            else if (meta.extension) { "${meta.id}_run${meta.run}_${meta.assembler}_${meta.extension}.markdup" }
            else if (meta.assembler) { "${meta.id}_run${meta.run}_${meta.assembler}.markdup" }
            else if (meta.run) { "${meta.id}_run${meta.run}.markdup" }
            else if (meta.id) { "${meta.id}.markdup" }
            else null
        }
    }

    withName: 'FASTQFASTA_PROPHAGETRACER_TSV:PROPHAGETRACER_WGS' {
        ext.args = params.prophage_tracer_args ? "${params.prophage_tracer_args}" : ""
    }

    withName: 'FASTQFASTA_MGEFINDER_TSV:MGEFINDER_FIND' {
        ext.args = params.mgefinder_find_args ? "${params.mgefinder_find_args}" : ""
    }

    withName: 'FASTQFASTA_MGEFINDER_TSV:MGEFINDER_PAIR' {
        ext.args = params.mgefinder_pair_args ? "${params.mgefinder_pair_args}" : ""
    }

    withName: 'FASTQFASTA_MGEFINDER_TSV:MGEFINDER_INFERSEQREFERENCE' {
        ext.args = params.mgefinder_inferseq_ref_args ? "${params.mgefinder_inferseq_ref_args}" : ""
    }

    withName: 'PROPAGATE' {
        ext.args = params.propagate_args ? "${params.propagate_args}" : ""
    }

    withName: 'SEQKIT_CONCAT_CLUSTER' {
        ext.args = "--full"
    }

    withName: 'FASTA_VCLUST_FASTATSV:VCLUST_ALIGN' {
        ext.args = params.vclust_align_args ? "${params.vclust_align_args}" : ""
    }

    withName: 'FASTA_VCLUST_FASTATSV:VCLUST_CLUSTER' {
        ext.args = params.vclust_cluster_args ? "${params.vclust_cluster_args}" : ""
    }

    withName: 'FASTA_VCLUST_FASTATSV:VCLUST_PREFILTER' {
        ext.args = params.vclust_prefilter_args ? "${params.vclust_prefilter_args}" : ""
    }

    withName: COVERM_CONTIG {
        ext.args = params.coverm_args ? "${params.coverm_args}" : ""
    }
}
