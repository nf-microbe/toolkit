nextflow_workflow {

    name "Test Subworkflow: FASTQ_READPREPROCESSING_FASTQ"
    script "../main.nf"
    workflow "FASTQ_READPREPROCESSING_FASTQ"

    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "subworkflows/fastq_readpreprocessing_fastq"
    tag "functions/getworkdirs"
    tag "functions/rmemptyfastqs"
    tag "cat/fastq"
    tag "fastp"
    tag "fastqc"
    tag "subworkflows/fastq_bowtie2_fastq"
    tag "subworkflows/utils_nfmicrobe_functions"

    test("sarscov2 - fastq - pe - run_fastp") {
        when {
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [ id:'test1', run:'1', single_end:false ], // meta map
                        [
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkifExists: true),
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkifExists: true)
                        ]
                    ],
                    [
                        [ id:'test2', run:'1', single_end:false ], // meta map
                        [
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test2_1.fastq.gz', checkifExists: true),
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test2_2.fastq.gz', checkifExists: true)
                        ]
                    ]
                )
                input[1] = true
                input[2] = false
                input[3] = false
                input[4] = []
                input[5] = []
                """
            }
        }
        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.trace.succeeded().size() == 6 },
                { assert snapshot(
                    workflow.out.preprocessed_fastq_gz,
                    workflow.out.versions
                    ).match()
                }
            )
        }
    }

    test("sarscov2 - fastq - pe - perform_runmerging") {
        when {
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [ id:'test1', run:'1', single_end:false ], // meta map
                        [
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkifExists: true),
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkifExists: true)
                        ]
                    ],
                    [
                        [ id:'test1', run:'2', single_end:false ], // meta map
                        [
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test2_1.fastq.gz', checkifExists: true),
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test2_2.fastq.gz', checkifExists: true)
                        ]
                    ]
                )
                input[1] = false
                input[2] = true
                input[3] = false
                input[4] = []
                input[5] = []
                """
            }
        }
        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.trace.succeeded().size() == 4 },
                { assert snapshot(
                    workflow.out.preprocessed_fastq_gz,
                    workflow.out.versions
                    ).match()
                }
            )
        }
    }

    test("sarscov2 - fastq - pe - run_hostremoval") {
        when {
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [ id:'test1', run:'1', single_end:false ], // meta map
                        [
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkifExists: true),
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkifExists: true)
                        ]
                    ],
                    [
                        [ id:'test2', run:'1', single_end:false ], // meta map
                        [
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test2_1.fastq.gz', checkifExists: true),
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test2_2.fastq.gz', checkifExists: true)
                        ]
                    ]
                )
                input[1] = false
                input[2] = false
                input[3] = true
                input[4] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.gz', checkifExists: true)
                input[5] = file("${projectDir}/assets/test-datasets/genomics/sarscov2/bowtie2/", checkifExists: true)
                """
            }
        }
        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.trace.succeeded().size() == 6 },
                { assert snapshot(
                    workflow.out.preprocessed_fastq_gz,
                    workflow.out.versions
                    ).match()
                }
            )
        }
    }

    test("sarscov2 - fastq - pe - run_nothing") {
        when {
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [ id:'test1', run:'1', single_end:false ], // meta map
                        [
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkifExists: true),
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkifExists: true)
                        ]
                    ],
                    [
                        [ id:'test2', run:'1', single_end:false ], // meta map
                        [
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test2_1.fastq.gz', checkifExists: true),
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test2_2.fastq.gz', checkifExists: true)
                        ]
                    ]
                )
                input[1] = false
                input[2] = false
                input[3] = false
                input[4] = []
                input[5] = []
                """
            }
        }
        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.trace.succeeded().size() == 2 },
                { assert snapshot(
                    workflow.out.preprocessed_fastq_gz,
                    workflow.out.versions
                    ).match()
                }
            )
        }
    }

    test("sarscov2 - fastq - pe - run_all") {
        when {
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [ id:'test1', run:'1', single_end:false ], // meta map
                        [
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkifExists: true),
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkifExists: true)
                        ]
                    ],
                    [
                        [ id:'test1', run:'2', single_end:false ], // meta map
                        [
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test2_1.fastq.gz', checkifExists: true),
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test2_2.fastq.gz', checkifExists: true)
                        ]
                    ],
                    [
                        [ id:'test2', run:'1', single_end:false ], // meta map
                        [
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test2_1.fastq.gz', checkifExists: true),
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test2_2.fastq.gz', checkifExists: true)
                        ]
                    ]
                )
                input[1] = true
                input[2] = true
                input[3] = true
                input[4] = file(params.modules_testdata_base_path + 'genomics/sarscov2/genome/genome.fasta.gz', checkifExists: true)
                input[5] = file("${projectDir}/assets/test-datasets/genomics/sarscov2/bowtie2/", checkifExists: true)
                """
            }
        }
        then {
            assertAll(
                { assert workflow.success },
                { assert workflow.trace.succeeded().size() == 11 },
                { assert snapshot(
                    workflow.out.preprocessed_fastq_gz,
                    workflow.out.versions
                    ).match()
                }
            )
        }
    }
}
