nextflow_workflow {

    name "Test Subworkflow FASTQFASTAGFA_ASSEMBLYEXTENSION_FASTA"
    script "../main.nf"
    workflow "FASTQFASTAGFA_ASSEMBLYEXTENSION_FASTA"

    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "subworkflows/fastqfastagfa_assemblyextension_fasta"
    tag "subworkflows/fastqfasta_cobra_fasta"
    tag "subworkflows/fastqgfa_phables_fasta"
    tag "subworkflows/utils_nfmicrobe_functions"

    test("lambda - fastq.gz - fasta.gz - gfa.gz") {
        when {
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [ id: 'test1' ],
                        [
                            file("${projectDir}/assets/test-datasets/genomics/lambda/illumina/fastq/SRR24085752_1.fastq.gz", checkIfExists: true),
                            file("${projectDir}/assets/test-datasets/genomics/lambda/illumina/fastq/SRR24085752_2.fastq.gz", checkIfExists: true),
                        ]
                    ],
                    [
                        [ id: 'test2' ],
                        [
                            file("${projectDir}/assets/test-datasets/genomics/lambda/illumina/fastq/SRR24085752_copy_1.fastq.gz", checkIfExists: true),
                            file("${projectDir}/assets/test-datasets/genomics/lambda/illumina/fastq/SRR24085752_copy_2.fastq.gz", checkIfExists: true),
                        ]
                    ]
                )
                input[1] = true
                input[2] = Channel.of(
                    [
                        [ id: 'test1', assembler: 'megahit' ],
                        [
                            file("${projectDir}/assets/test-datasets/genomics/lambda/illumina/fasta/SRR24085752.fa.gz", checkIfExists: true),
                        ]
                    ],
                    [
                        [ id: 'test2', assembler: 'megahit' ],
                        [
                            file("${projectDir}/assets/test-datasets/genomics/lambda/illumina/fasta/SRR24085752_copy.fa.gz", checkIfExists: true),
                        ]
                    ]
                )
                input[3] = Channel.of(
                    [
                        [ id: 'test1' ],
                        file("${projectDir}/assets/test-datasets/genomics/lambda/illumina/log/SRR24085752.megahit.log", checkIfExists: true)
                    ],
                    [
                        [ id: 'test2' ],
                        file("${projectDir}/assets/test-datasets/genomics/lambda/illumina/log/SRR24085752_copy.megahit.log", checkIfExists: true)
                    ]
                )
                input[4] = Channel.of(
                    [
                        [ id: 'test1' ],
                        [
                            file("${projectDir}/assets/test-datasets/genomics/lambda/text/SRR24085752_queries.tsv", checkIfExists: true),
                        ]
                    ],
                    [
                        [ id: 'test2' ],
                        [
                            file("${projectDir}/assets/test-datasets/genomics/lambda/text/SRR24085752_copy_queries.tsv", checkIfExists: true),
                        ]
                    ]
                )
                input[5] = true
                input[6] = Channel.of(
                    [
                        [ id: 'test1' ],
                        [
                            file("${projectDir}/assets/test-datasets/genomics/lambda/illumina/gfa/SRR24085752.gfa.gz", checkIfExists: true),
                        ]
                    ],
                    [
                        [ id: 'test2' ],
                        [
                            file("${projectDir}/assets/test-datasets/genomics/lambda/illumina/gfa/SRR24085752_copy.gfa.gz", checkIfExists: true),
                        ]
                    ]
                )
                input[7] = file("${projectDir}/assets/configs/phables/phables_config.yml", checkIfExists: true)
                input[8] = null
                """
            }
        }
        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out).match()}
            )
        }
    }
}
