nextflow_workflow {

    name "Test Subworkflow FASTA_MGECLASSIFICATION_FASTATSV"
    script "../main.nf"
    workflow "FASTA_MGECLASSIFICATION_FASTATSV"

    tag "subworkflows"
    tag "subworkflows_nfcore"
    tag "subworkflows/fasta_mgeclassification_fastatsv"
    tag "subworkflows/fasta_genomad_fastatsv"
    tag "subworkflows/utils_nfmicrobe_functions"
    tag "pyhmmer"
    tag "pyhmmer/virusclassify"
    tag "pyhmmer/plasmidclassify"
    tag "pyhmmer/buscoclassify"

    test("b_fragilis - fasta - test_full") {
        when {
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [ id:'test1', single_end:false ], // meta map
                        file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fasta/test1.contigs.fa.gz', checkIfExists: true)
                    ],
                    [
                        [ id:'test2', single_end:false ], // meta map
                        file("${projectDir}/assets/test-datasets/genomics/prokaryotes/bacteroides_fragilis/illumina/fasta/test2.contigs.fa.gz", checkIfExists: true)
                    ]
                )
                input[1] = Channel.of(
                    [
                        [ id:'test1', single_end:false ], // meta map
                        file("${projectDir}/assets/test-datasets/genomics/prokaryotes/bacteroides_fragilis/illumina/faa/test1.pyrodigalgv.faa.gz", checkIfExists: true)
                    ],
                    [
                        [ id:'test2', single_end:false ], // meta map
                        file("${projectDir}/assets/test-datasets/genomics/prokaryotes/bacteroides_fragilis/illumina/faa/test2.pyrodigalgv.faa.gz", checkIfExists: true)
                    ]
                )
                input[2] = true
                input[3] = null
                input[4] = true
                input[5] = true
                input[6] = true
                """
            }
        }
        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out).match()}
            )
        }
    }

    test("b_fragilis - fasta - test_nothing") {
        when {
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [ id:'test1', single_end:false ], // meta map
                        file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fasta/test1.contigs.fa.gz', checkIfExists: true)
                    ],
                    [
                        [ id:'test2', single_end:false ], // meta map
                        file("${projectDir}/assets/test-datasets/genomics/prokaryotes/bacteroides_fragilis/illumina/fasta/test2.contigs.fa.gz", checkIfExists: true)
                    ]
                )
                input[1] = Channel.of(
                    [
                        [ id:'test1', single_end:false ], // meta map
                        file("${projectDir}/assets/test-datasets/genomics/prokaryotes/bacteroides_fragilis/illumina/faa/test1.pyrodigalgv.faa.gz", checkIfExists: true)
                    ],
                    [
                        [ id:'test2', single_end:false ], // meta map
                        file("${projectDir}/assets/test-datasets/genomics/prokaryotes/bacteroides_fragilis/illumina/faa/test2.pyrodigalgv.faa.gz", checkIfExists: true)
                    ]
                )
                input[2] = false
                input[3] = null
                input[4] = false
                input[5] = false
                input[6] = false
                """
            }
        }
        then {
            assertAll(
                { assert workflow.success},
                { assert snapshot(workflow.out).match()}
            )
        }
    }
}
