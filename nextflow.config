/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    nf-microbe/toolkit Nextflow config file
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Default config options for all compute environments
----------------------------------------------------------------------------------------
*/

// Global default params, used in configs
params {

    // PIPELINE OPTIONS
    // Input/output
    input                       = null
    fastqs                      = null
    fastas                      = null
    outdir                      = null
    // Cleanup
    remove_intermediate_files   = false
    // READ PREPROCESSING OPTIONS
    run_fastp                   = false
    fastp_args                  = null
    save_preprocessed_fastq     = false
    // READ MERGING OPTIONS
    perform_run_merging         = false
    save_run_merged_fastq       = false
    // HOST READ REMOVAL OPTIONS
    run_bowtie2_host_removal    = false
    bowtie2_host_removal_args   = null
    genome                      = null
    igenomes_base               = 's3://ngi-igenomes/igenomes/'
    igenomes_ignore             = false
    host_fasta                  = null
    host_bowtie2_index          = null
    // READ ASSEMBLY OPTIONS
    run_megahit_single          = false
    run_megahit_coassembly      = false
    megahit_args                = null
    run_spades_single           = false
    run_spades_coassembly       = false
    spades_args                 = "--meta"
    use_spades_scaffolds        = false
    run_penguin_single          = false
    run_penguin_coassembly      = false
    penguin_args                = null
    // ASSEMBLY EXTENSION OPTIONS
    run_cobra                   = false
    cobra_min_len               = 10000
    cobra_coverm_args           = null
    cobra_args                  = null
    run_phables                 = false
    phables_db                  = null
    phables_args                = null
    // ASSEMBLY QC OPTIONS
    assembly_min_len            = 1500
    save_filtered_fasta         = false
    run_seqkit_stats            = false
    run_trfinder                = false
    trfinder_args               = null
    use_trfinder_fasta          = false
    run_tantan                  = false
    tantan_args                 = "-s 0.9"
    pyrodigalgv_args            = null
    run_nucleotide_stats        = false
    // MGE CLASSIFICATION OPTIONS
    run_genomad                 = false
    genomad_db                  = null
    genomad_args                = null
    run_pyhmmer_virus           = false
    run_pyhmmer_plasmid         = false
    run_pyhmmer_busco           = false
    // VIRUS QC OPTIONS
    run_checkv                  = false
    checkv_db                   = null
    checkv_args                 = null



    // MultiQC options
    multiqc_config              = null
    multiqc_title               = null
    multiqc_logo                = null
    max_multiqc_email_size      = '25.MB'
    multiqc_methods_description = null

    // Boilerplate options
    publish_dir_mode                = 'copy'
    email                           = null
    email_on_fail                   = null
    plaintext_email                 = false
    monochrome_logs                 = false
    hook_url                        = null
    help                            = false
    version                         = false
    pipelines_testdata_base_path    = 'https://raw.githubusercontent.com/nf-core/test-datasets/'

    // Config options
    config_profile_name             = null
    config_profile_description      = null
    custom_config_version           = 'master'
    custom_config_base              = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
    config_profile_contact          = null
    config_profile_url              = null

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                      = '128.GB'
    max_cpus                        = 16
    max_time                        = '240.h'

    // Schema validation default options
    validationFailUnrecognisedParams = false
    validationLenientMode            = false
    validationSchemaIgnoreParams     = 'genomes,igenomes_base'
    validationShowHiddenParams       = false
    validate_params                  = true

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load modules.config for DSL2 module specific options
includeConfig './workflows/toolkit/nextflow.config'

// Load nf-core custom profiles from different Institutions
try {
    includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

// Load nf-microbe/toolkit custom profiles from different institutions.
try {
    includeConfig "${params.custom_config_base}/pipeline/toolkit.config"
} catch (Exception e) {
    System.err.println("WARNING: Could not load nf-core/config/toolkit profiles: ${params.custom_config_base}/pipeline/toolkit.config")
}
profiles {
    debug {
        dumpHashes              = true
        process.beforeScript    = 'echo $HOSTNAME'
        cleanup                 = false
        nextflow.enable.configProcessNamesValidation = true
    }
    conda {
        conda.enabled           = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        conda.channels          = ['conda-forge', 'bioconda', 'defaults']
        apptainer.enabled       = false
    }
    mamba {
        conda.enabled           = true
        conda.useMamba          = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    docker {
        docker.enabled          = true
        conda.enabled           = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
        docker.runOptions       = '-u $(id -u):$(id -g)'
    }
    arm {
        docker.runOptions       = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled     = true
        singularity.autoMounts  = true
        conda.enabled           = false
        docker.enabled          = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    podman {
        podman.enabled          = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    shifter {
        shifter.enabled         = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    charliecloud {
        charliecloud.enabled    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        apptainer.enabled       = false
    }
    apptainer {
        apptainer.enabled       = true
        apptainer.autoMounts    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
    }
    wave {
        apptainer.ociAutoPull   = true
        singularity.ociAutoPull = true
        wave.enabled            = true
        wave.freeze             = true
        wave.strategy           = 'conda,container'
    }
    gitpod {
        executor.name           = 'local'
        executor.cpus           = 4
        executor.memory         = 8.GB
    }
    nf_test             { includeConfig 'conf/nf_test.config'                       }
    test_fastq          { includeConfig 'conf/test_fastq.config'                    }
    test_fasta          { includeConfig 'conf/test_fasta.config'                    }
    test_fastq_fasta    { includeConfig 'conf/test_fastq_fasta.config'              }
    test                { includeConfig 'conf/test.config'                          }
    test_nothing        { includeConfig 'conf/test_nothing.config'                  }
    uw_hyak             { includeConfig 'assets/configs/conf/uw_hyak.config'        }
}

// Set default registry for Apptainer, Docker, Podman and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Singularity are enabled
// Set to your registry if you have a mirror of containers
apptainer.registry   = 'quay.io'
docker.registry      = 'quay.io'
podman.registry      = 'quay.io'
singularity.registry = 'quay.io'

// Nextflow plugins
plugins {
    id 'nf-validation@1.1.3' // Validation of pipeline parameters and creation of an input channel from a sample sheet
}

// Load igenomes.config if required
if (!params.igenomes_ignore) {
    includeConfig 'conf/igenomes.config'
} else {
    params.genomes = [:]
}
// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Disable process selector warnings by default. Use debug profile to enable warnings.
nextflow.enable.configProcessNamesValidation = false

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'nf-microbe/toolkit'
    author          = """@CarsonJM"""
    homePage        = 'https://github.com/nf-microbe/toolkit'
    description     = """A toolkit for running microbe-related analyses within a Nextflow infrastructure."""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.0'
    version         = '0.1beta'
    doi             = ''
}

// Set to true to enable the use of binaries from modules
nextflow.enable.moduleBinaries = true

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
