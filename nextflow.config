// Global default params, used in configs
params {
    // PIPELINE OPTIONS
    // Input/output
    input                       = null
    fastqs                      = null
    fastas                      = null
    sra_accessions              = null
    outdir                      = null
    publish_dir_mode            = 'copy'
    // READ DOWNLOAD OPTIONS
    download_sra_fastqs         = false
    // READ PREPROCESSING OPTIONS
    run_fastp                   = false
    fastp_args                  = null
    // HOST READ REMOVAL OPTIONS
    run_bowtie2_host_removal    = false
    bowtie2_host_removal_args   = null
    igenomes_host_key           = null
    host_fasta                  = null
    host_bowtie2_index          = null
    // VIRUS ENRICHMENT EVALUATION OPTIONS
    run_viromeqc                = false
    viromeqc_db                 = null
    viromeqc_args               = null
    // READ MERGING OPTIONS
    perform_run_merging         = false
    // LOGAN MULTIPLIED DOWNLOAD OPTIONS
    download_logan_mult_contigs = false
    download_logan_mult_unitigs = false
    logan_mult_min_abund        = 0
    // READ ASSEMBLY OPTIONS
    run_megahit_single          = false
    run_megahit_coassembly      = false
    megahit_args                = null
    run_spades_single           = false
    run_spades_coassembly       = false
    spades_args                 = "--meta"
    use_spades_scaffolds        = false
    run_penguin_single          = false
    run_penguin_coassembly      = false
    penguin_args                = null
    // ASSEMBLY EXTENSION OPTIONS
    run_cobra                   = false
    cobra_min_len               = 10000
    cobra_coverm_args           = null
    cobra_args                  = null
    run_phables                 = false
    phables_db                  = null
    phables_args                = null
    // ASSEMBLY DOWNLOAD OPTIONS
    download_logan_contigs      = false
    // ASSEMBLY QC OPTIONS
    assembly_min_len            = 0
    run_seqkit_stats            = false
    run_trfinder                = false
    trfinder_args               = null
    use_trfinder_fasta          = false
    prepend_sample_id           = false
    // ASSEMBLY SPLIT OPTIONS
    assembly_split_size         = 0
    // MGE CLASSIFICATION OPTIONS
    run_genomad                 = false
    genomad_db                  = null
    genomad_args                = null
    run_pyhmmer_virus           = false
    run_pyhmmer_plasmid         = false
    run_pyhmmer_busco           = false
    // VIRUS COMPLETENESS OPTIONS
    run_checkv                  = false
    checkv_db                   = null
    checkv_args                 = null
    // MGE QC FILTERING OPTIONS
    run_nucleotide_stats        = false
    run_tantan                  = false
    tantan_args                 = "-s 0.9"
    // ASSEMBLY DEREPLICATION OPTIONS
    run_trtrimmer               = false
    trtrimmer_args              = null
    run_seqhasher               = false
    seqhasher_args              = null
    // VIRUS CLUSTERING OPTIONS
    run_vclust                  = false
    vclust_prefilter_args       = null
    vclust_align_args           = null
    vclust_cluster_args         = null

    // illumina iGenomes reference file paths
    genomes {
        'GRCh37' {
            fasta       = "s3://ngi-igenomes/igenomes/Homo_sapiens/Ensembl/GRCh37/Sequence/WholeGenomeFasta/genome.fa"
            bowtie2     = "s3://ngi-igenomes/igenomes/Homo_sapiens/Ensembl/GRCh37/Sequence/Bowtie2Index/"
        }
        'GRCh38' {
            fasta       = "s3://ngi-igenomes/igenomes/Homo_sapiens/NCBI/GRCh38/Sequence/WholeGenomeFasta/genome.fa"
            bowtie2     = "s3://ngi-igenomes/igenomes/Homo_sapiens/NCBI/GRCh38/Sequence/Bowtie2Index/"
        }
        'hg38' {
            fasta       = "s3://ngi-igenomes/igenomes/Homo_sapiens/UCSC/hg38/Sequence/WholeGenomeFasta/genome.fa"
            bowtie2     = "s3://ngi-igenomes/igenomes/Homo_sapiens/UCSC/hg38/Sequence/Bowtie2Index/"
        }
        'hg19' {
            fasta       = "s3://ngi-igenomes/igenomes/Homo_sapiens/UCSC/hg19/Sequence/WholeGenomeFasta/genome.fa"
            bowtie2     = "s3://ngi-igenomes/igenomes/Homo_sapiens/UCSC/hg19/Sequence/Bowtie2Index/"
        }
        'EB2' {
            fasta       = "s3://ngi-igenomes/igenomes/Bacillus_subtilis_168/Ensembl/EB2/Sequence/WholeGenomeFasta/genome.fa"
            bowtie2     = "s3://ngi-igenomes/igenomes/Bacillus_subtilis_168/Ensembl/EB2/Sequence/Bowtie2Index/"
        }
    }

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                      = '128.GB'
    max_cpus                        = 16
    max_time                        = '240.h'

}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

process {
    withName: '.*' {
        ext.prefix = { prefix ->
            if (meta.chunk && meta.extension) { "${meta.id}_run${meta.run}_${meta.assembler}_${meta.extension}_${meta.chunk}" }
            else if (meta.chunk && meta.assembler) { "${meta.id}_run${meta.run}_${meta.assembler}_${meta.chunk}" }
            else if (meta.chunk) { "${meta.id}_run${meta.run}_${meta.chunk}" }
            else if (meta.assembler) { "${meta.id}_run${meta.run}_${meta.assembler}" }
            else if (meta.run) { "${meta.id}_run${meta.run}" }
            else { "${meta.id}" }
        }
        publishDir = { "${params.outdir}" + "/" + task.process.replace(':', '/').toLowerCase() }
    }
}

// Load module configs
includeConfig './modules/nf-core/cat/fastq/nextflow.config'
includeConfig './modules/nf-core/fastp/nextflow.config'
includeConfig './modules/nf-core/logan/contigawscli/nextflow.config'
includeConfig './modules/nf-core/logan/contigawsclimultiplier/nextflow.config'
includeConfig './modules/nf-core/logan/unitigawsclimultiplier/nextflow.config'
includeConfig './modules/nf-core/megahit/megahit/nextflow.config'
includeConfig './modules/nf-core/plass/penguin/nextflow.config'
includeConfig './modules/nf-core/seqkit/replace/nextflow.config'
includeConfig './modules/nf-core/seqkit/seq/nextflow.config'
includeConfig './modules/nf-core/seqkit/split2/nextflow.config'
includeConfig './modules/nf-core/seqkit/stats/nextflow.config'
includeConfig './modules/nf-core/spades/nextflow.config'
includeConfig './modules/nf-core/sra/sratools/nextflow.config'
includeConfig './modules/nf-core/tantan/nextflow.config'
includeConfig './modules/nf-core/trfinder/nextflow.config'
includeConfig './subworkflows/nf-core/fasta_genomad_faatsv/nextflow.config'
includeConfig './subworkflows/nf-core/fastq_bowtie2_fastq/nextflow.config'
includeConfig './subworkflows/nf-core/fastq_viromeqc_tsv/nextflow.config'
includeConfig './subworkflows/nf-core/fastqfasta_cobra_fasta/nextflow.config'
includeConfig './subworkflows/nf-core/fastqgfa_phables_fasta/nextflow.config'

profiles {
    debug {
        dumpHashes              = true
        process.beforeScript    = 'echo $HOSTNAME'
        cleanup                 = false
        nextflow.enable.configProcessNamesValidation = true
    }
    conda {
        conda.enabled           = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        conda.channels          = ['conda-forge', 'bioconda', 'defaults']
        apptainer.enabled       = false
    }
    mamba {
        conda.enabled           = true
        conda.useMamba          = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    docker {
        docker.enabled          = true
        conda.enabled           = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
        docker.runOptions       = '-u $(id -u):$(id -g)'
    }
    singularity {
        singularity.enabled     = true
        singularity.autoMounts  = true
        conda.enabled           = false
        docker.enabled          = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    apptainer {
        apptainer.enabled       = true
        apptainer.autoMounts    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
    }
    nf_test             { includeConfig 'conf/nf_test.config'                       }
    test_full           { includeConfig 'conf/test_full.config'                     }
    test                { includeConfig 'conf/test.config'                          }
    test_nothing        { includeConfig 'conf/test_nothing.config'                  }
    uw_hyak             { includeConfig 'assets/configs/conf/uw_hyak.config'        }
}

// Set default registry for Apptainer, Docker, Podman and Singularity independent of -profile
// Will not be used unless Apptainer / Docker / Podman / Singularity are enabled
// Set to your registry if you have a mirror of containers
apptainer.registry   = 'quay.io'
docker.registry      = 'quay.io'
podman.registry      = 'quay.io'
singularity.registry = 'quay.io'

// Nextflow plugins
plugins {
    id 'nf-validation@1.1.3' // Validation of pipeline parameters and creation of an input channel from a sample sheet
}


// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Disable process selector warnings by default. Use debug profile to enable warnings.
nextflow.enable.configProcessNamesValidation = false

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'nf-microbe/toolkit'
    author          = """@CarsonJM"""
    homePage        = 'https://github.com/nf-microbe/toolkit'
    description     = """A toolkit for running microbe-related analyses within a Nextflow infrastructure."""
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.0'
    version         = '0.1beta'
    doi             = ''
}

// Set to true to enable the use of binaries from modules
nextflow.enable.moduleBinaries = true

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
