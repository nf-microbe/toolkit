nextflow_workflow {

    name "Test Subworkflow: READPREPROCESSING"
    script "../main.nf"
    workflow "READPREPROCESSING"

    tag "nfmicrobe_toolkit_ci"

    test("host_removal: igenomes input") {
        when {
            params {
                run_bowtie2_host_removal    = true
                genome                      = "EB1"
            }
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [ id:'test1', run:'1', single_end:false ], // meta map
                        [
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkifExists: true),
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkifExists: true)
                        ]
                    ],
                    [
                        [ id:'test2', run:'1', single_end:false ], // meta map
                        [
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test2_1.fastq.gz', checkifExists: true),
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test2_2.fastq.gz', checkifExists: true)
                        ]
                    ]
                )
                input[1] = params
                """
            }
        }
        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.versions
                    ).match()
                }
            )
        }
    }

    test("host_removal: local index input") {
        when {
            params {
                run_bowtie2_host_removal    = true
                host_bowtie2_index          = "${projectDir}/assets/test-datasets/bowtie2/"
                host_fasta                  = "${projectDir}/assets/test-datasets/fastas/genome.fasta.gz"
            }
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [ id:'test1', run:'1', single_end:false ], // meta map
                        [
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkifExists: true),
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkifExists: true)
                        ]
                    ],
                    [
                        [ id:'test2', run:'1', single_end:false ], // meta map
                        [
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test2_1.fastq.gz', checkifExists: true),
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test2_2.fastq.gz', checkifExists: true)
                        ]
                    ]
                )
                input[1] = params
                """
            }
        }
        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.versions
                    ).match()
                }
            )
        }
    }

    test("host_removal: local fasta input") {
        when {
            params {
                run_bowtie2_host_removal    = true
                host_fasta                  = "${projectDir}/assets/test-datasets/fastas/genome.fasta.gz"
            }
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [ id:'test1', run:'1', single_end:false ], // meta map
                        [
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkifExists: true),
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkifExists: true)
                        ]
                    ],
                    [
                        [ id:'test2', run:'1', single_end:false ], // meta map
                        [
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test2_1.fastq.gz', checkifExists: true),
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test2_2.fastq.gz', checkifExists: true)
                        ]
                    ]
                )
                input[1] = params
                """
            }
        }
        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.versions
                    ).match()
                }
            )
        }
    }

    test("host_removal: no host genome") {
        when {
            params {
                run_bowtie2_host_removal    = true
            }
            workflow {
                """
                input[0] = Channel.of(
                    [
                        [ id:'test1', run:'1', single_end:false ], // meta map
                        [
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkifExists: true),
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkifExists: true)
                        ]
                    ],
                    [
                        [ id:'test2', run:'1', single_end:false ], // meta map
                        [
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test2_1.fastq.gz', checkifExists: true),
                            file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test2_2.fastq.gz', checkifExists: true)
                        ]
                    ]
                )
                input[1] = params
                """
            }
        }
        then {
            assertAll(
                { assert !workflow.success },
                { assert workflow.stdout.contains("[nf-microbe/toolkit]: --run_bowtie2_host_removal = true but no iGenomes (--genome) or custom fasta (--host_fasta) provided") }
            )
        }
    }
}
