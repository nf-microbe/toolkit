nextflow_process {

    name "Test Process PHABLES_RUN"
    script "../main.nf"
    process "PHABLES_RUN"

    tag "modules"
    tag "modules_nfcore"
    tag "phables"
    tag "phables/install"
    tag "phables/run"

    setup {
        run("PHABLES_INSTALL") {
            script "../../install/main.nf"
        }
    }

    test("lambda - fastq - gfa") {
        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file("${projectDir}/assets/test-datasets/genomics/lambda/illumina/fastq/SRR24085752_1.fastq.gz", checkIfExists: true),
                        file("${projectDir}/assets/test-datasets/genomics/lambda/illumina/fastq/SRR24085752_2.fastq.gz", checkIfExists: true)
                    ]
                ]
                input[1] = [
                    [ id:'test', single_end:false ], // meta map
                        file("${projectDir}/assets/test-datasets/genomics/lambda/illumina/gfa/SRR24085752.gfa.gz", checkIfExists: true)
                ]
                input[2] = [
                    file("${projectDir}/assets/configs/phables/phables_config.yml", checkIfExists: true),
                ]
                input[3] = PHABLES_INSTALL.out.phables_db
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(
                    process.out.fasta,
                    process.out.info,
                    file(process.out.log[0][1]).name,
                    process.out.versions
                    ).match()
                }
            )
        }
    }

    test("lambda - fastq - gfa - stub") {
        options "-stub"
        when {
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file("${projectDir}/assets/test-datasets/genomics/lambda/illumina/fastq/SRR24085752_1.fastq.gz", checkIfExists: true),
                        file("${projectDir}/assets/test-datasets/genomics/lambda/illumina/fastq/SRR24085752_2.fastq.gz", checkIfExists: true)
                    ]
                ]
                input[1] = [
                    [ id:'test', single_end:false ], // meta map
                        file("${projectDir}/assets/test-datasets/genomics/lambda/illumina/gfa/SRR24085752.gfa.gz", checkIfExists: true)
                ]
                input[2] = [
                    file("${projectDir}/assets/configs/phables/phables_config.yml", checkIfExists: true),
                ]
                input[3] = PHABLES_INSTALL.out.phables_db
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
