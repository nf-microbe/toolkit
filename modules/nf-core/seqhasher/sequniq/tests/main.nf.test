nextflow_process {

    name "Test Process SEQHASHER_SEQUNIQ"
    script "../main.nf"
    process "SEQHASHER_SEQUNIQ"

    tag "modules"
    tag "modules_nfcore"
    tag "cat"
    tag "cat/cat"
    tag "seqhasher"
    tag "seqhasher/seqhasher"
    tag "seqhasher/sequniq"

    setup {
        run("CAT_CAT") {
            script "../../../cat/cat/main.nf"
            process {
                """
                input[0] = [
                    [ id:'test', single_end:false ], // meta map
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fasta/contigs.fasta', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fasta/scaffolds.fasta', checkIfExists: true)
                    ]
                ]
                """
            }
        }

        run("SEQHASHER_SEQHASHER") {
            script "../../seqhasher/main.nf"
            process {
                """
                input[0] = CAT_CAT.out.file_out
                input[1] = file("https://github.com/nf-microbe/modules/raw/refs/heads/master/bin/seq-hasher", checkIfExists: true)
                """
            }
        }
    }

    test("duplicated fasta.gz") {
        when {
            process {
                """
                input[0] = SEQHASHER_SEQHASHER.out.tsv
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }

    test("stub") {
        options "-stub"
        when {
            process {
                """
                input[0] = SEQHASHER_SEQHASHER.out.tsv
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
