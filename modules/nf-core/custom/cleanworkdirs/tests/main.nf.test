nextflow_process {

    name "Test Process CUSTOM_CLEANWORKDIRS"
    script "../main.nf"
    process "CUSTOM_CLEANWORKDIRS"

    tag "modules"
    tag "modules_nfcore"
    tag "custom"
    tag "custom/cleanworkdirs"
    tag "cat/fastq"

    setup {
        run("CAT_FASTQ") {
            script "../../../cat/fastq/main.nf"
            process {
                """
                input[0] = Channel.of(
                    [
                        [ id:'test', single_end:true ], // meta map
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkifExists: true)
                    ]
                )
                """
            }
        }
    }

    test("cat/fastq") {
        when {
            process {
                """
                input[0] = CAT_FASTQ.out.reads
                    .map { meta, reads ->
                        [ meta, reads.getParent().toString(), "CAT_FASTQ" ]
                    }
                """
            }
        }
        then {
            assertAll (
                { assert process.success },
                { assert snapshot(
                    file(process.out.cleaned_workdir[0][1]).name,
                    process.out.versions
                ).match()
                }
            )
        }
    }

    test("stub") {
        options "-stub"
        when {
            process {
                """
                input[0] = CAT_FASTQ.out.reads
                    .map { meta, reads ->
                        [ meta, reads.getParent().toString(), "CAT_FASTQ" ]
                    }
                """
            }
        }
        then {
            assertAll (
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
